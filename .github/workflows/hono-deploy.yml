name: "Backend Deployment"

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "apps/backend"
      - "packages/api"

jobs:
  deploy:
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set-up pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          run_install: false

      - name: Expose pnpm config(s) through "$GITHUB_OUTPUT"
        id: pnpm-config
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache rotation keys
        id: cache-rotation
        shell: bash
        run: |
          echo "YEAR_MONTH=$(/bin/date -u "+%Y%m")" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-config.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-

      # Prevent store to grow over time (not needed with yarn)
      # Note: not perfect as it prune too much in monorepos so the idea
      #       is to use cache-rotation as above. In the future this might work better.
      #- name: Prune pnpm store
      #  shell: bash
      #  run: pnpm prune store

      - name: Install dependencies
        shell: bash
        working-directory: ./
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Deploy
        uses: cloudflare/wrangler-action@v3.1.0
        with:
          wranglerVersion: "3.6.0"
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          workingDirectory: "apps/backend"
          command: deploy src/index.ts --minify
          # secrets: |
          #   APP_URL
        env:
          # APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          CI: true
          NO_D1_WARNING: true
